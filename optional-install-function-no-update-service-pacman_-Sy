# Install Packages
install() {
    clear_screen
    local search_query="$1"
    local fzf_cmd="fzf --reverse --multi --preview '
        if pacman -Qi {1} &>/dev/null; then
            echo \"Package Info (installed):\"
            yay -Qi {1}
            echo
            echo \"Installed Files:\"
            pacman -Ql {1} | grep -v \"/$\" | cut -d\" \" -f2-
        else
            echo \"Package Info (not installed):\"
            yay -Si {1}
            echo
            if yay -Si {1} | grep -q \"^Repository *: aur$\"; then
                echo \"PKGBUILD:\"
                echo \"Loading PKGBUILD... Please wait.\"
                yay -G {1} --noconfirm >/dev/null 2>&1
                if [ -f {1}/PKGBUILD ]; then
                    echo -e \"\\n--- PKGBUILD content ---\\n\"
                    cat {1}/PKGBUILD
                else
                    echo \"PKGBUILD not available\"
                fi
                rm -rf {1} 2>/dev/null
            else
                echo \"Files that would be installed:\"
                yay -Fl {1} 2>/dev/null | awk '\''{print $2}'\'' || echo \"File list not available\"
            fi
        fi
    ' --preview-window=right:60%:wrap --header 'Select packages to install
(TAB to select, ENTER to confirm, Ctrl+C to exit)' --bind 'ctrl-c:abort' --tiebreak=index --sort"
    
    # Get exact repository order from pacman.conf
    local repo_order=$(grep '^\[.*\]' /etc/pacman.conf | grep -v '^\[options\]' | sed 's/[][]//g')
    
    # Update package databases
    sudo pacman -Sy

    # Get list of all available packages and installed packages
    local package_list=$(yay -Sl --refresh)
    local installed_packages=$(pacman -Qq)
    
    # Sort package list based on repository order and installation status
    local sorted_package_list=$(echo "$package_list" | awk -v repo_order="$repo_order" -v installed="$installed_packages" '
    BEGIN {
        split(repo_order, repos)
        for (i in repos) {
            repo_priority[repos[i]] = i
        }
        split(installed, inst_arr)
        for (pkg in inst_arr) {
            is_installed[inst_arr[pkg]] = 1
        }
    }
    {
        repo = $1
        package = $2
        version = $3
        if (version == "" || version == "unknown") {
            version = "(unknown version)"
        }
        priority = (repo in repo_priority) ? repo_priority[repo] : (repo == "aur" ? 998 : 999)
        installed_priority = (package in is_installed) ? 0 : 1
        status = (package in is_installed) ? "[INSTALLED]" : ""
        if (repo == "aur") {
            printf "%01d %03d %-50s %-20s %s\n", installed_priority, priority, package, repo, status
        } else {
            printf "%01d %03d %-50s %-20s %s\n", installed_priority, priority, package " (" version ")", repo, status
        }
    }' | sort -n | cut -d' ' -f3-)
    
    # Use fzf to select packages, with initial query if provided
    local selected_packages
    if [ -n "$search_query" ]; then
        selected_packages=$(echo "$sorted_package_list" | eval "$fzf_cmd -q \"$search_query\"" | awk '{print $1}')
    else
        selected_packages=$(echo "$sorted_package_list" | eval "$fzf_cmd" | awk '{print $1}')
    fi
    
    if [ -n "$selected_packages" ]; then
        echo "The following packages will be installed:"
        echo "$selected_packages"
        read -p "Do you want to proceed? [Y/n] " confirm
        case $confirm in
            [Nn]* ) echo "Operation cancelled.";;
            * ) yay -S $selected_packages;;
        esac
    fi
    handle_return
}